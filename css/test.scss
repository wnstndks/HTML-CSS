// CSS 대용 언어 - SASS
// 조건문, 반복문, 변수, 함수 존재함
// 프로그래밍 스럽게 문법을 짜서 반복적인 부분 쉽게 처리 가능 
// sass 파일명은 scss
// 웹브라우저는 .css만 읽을수 있음
// 그래서 scss 파일을 css파일로 변환해야 함 그래서 익스텐션 깐것
// .map파일은 크롬 개발자도구 디버깅용 
// sass파일은 sass문법 사용가능한데 괄호 안써도 됨

.background
    color:red

.box{
    width: 100%;
}


// 어려운 단어 기억해야할 땐 변수문법 사용
// 변수 만들려면 $변수명 : 저장해서 쓸 값
// 규칙적인 스타일만들때도 도움이 됨
// sass에서는 사칙 연산 바로가능 +-는 같은 단위끼리 해야함 * /는 정수로

$메인칼라 : #2a4cb2; 
$서브칼라 : #eeeeee;
$기본사이즈: 16px;



.background{
    background-color: $메인칼라;
}

// nesting 문법 - 관련있는 class들 묶을때 좋음
// nesting은 두개 이상 중첩x

.main-bg{
    width:100%;

    h4{
        font-size:16px;
    }

    button{
        color:red;
    }
}


// @extend 문법
// 중복 없애려면 뼈와 살을 분리하면 좋댔음
// -> sass 사용 중복이 발생하는 것들 변수로 치환하기
// class 전체를 복사해주는 @extend명
// %임시클래스명
// #임시클래스 특징: 단독으로 컴파일 되지는 않음 다른 클래스에 종속되어야 하기에 따로 써주어야함

%btn{
    width: 100px;
    height: 100px;
    padding:20px;
}

.btn-green{
    @extend %btn;
    color:green;
}

.btn-red{
    @extend %btn;
    color:red;
}

.btn-blue{
    @extend %btn;
    color:blue;
}

// @mixin문법 - 함수
// sass를 써서 밑의 것들을 축약하고 싶음
// mixin 사용

@mixin 작명($구멍, $구멍2){
    // 안에 있는 긴 코드를 작명() 이걸로 축약해주세요
    // =>긴 코드를 짧은 단어로 축약할 때 사용
    font-size: $구멍;
    letter-spacing: -1px;
    // 글자중간에 $변수나 $파라미터 넣을 땐 #{$변수명}
    #{$구멍2}:100px;
}

// @mixin 문법의 $파라미터 긴코드를 가변적으로 만들때 씀

h2{
   @include 작명(40px, width)
}

h3{
    @include 작명(30px)
}

h4{
    font-size: 10px;
    letter-spacing: -1px;
    //  다른 파일의 @mixin쓰려면 파일명.$mixin이름
    color: reset.$메인칼라;



}

// 다른 파일에 있는 내용 가져오고 싶을 땐, @use '파일경로';
@use '/css/reset.scss';

